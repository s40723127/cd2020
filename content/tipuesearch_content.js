var tipuesearch = {"pages": [{'title': '個人簡介', 'text': 'github :\xa0 https://github.com/s40723127/cd2020 \n cd2020 ag2倉儲 :\xa0 https://github.com/s40723150/cd2020ag2 \n cd2020 ag2 網頁 :\xa0 https://s40723150.github.io/cd2020ag2/content/index.html', 'tags': '', 'url': '個人簡介.html'}, {'title': '亂數分組', 'text': "亂數分組 python程式 -甲班 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n \n \n \n import   random \n groupList = [[ '40723104' ,  '40723107' ,  '40723114' ,  '40723115' ,  '40723118' ,  '40723122' ,  '40723123' ,  '40723140' ,  '40723149' ,  '40723151' ,  '40723153' ,  '40723154' ,  '40723155' ,  '40623143' ,  '40723108' ,  '40723127' ,  '40723132' ,  '40723133' ,  '40723137' ,  '40723141' ,  '40723143' ,  '40723144' ,  '40723147' ,  '40723148' ,  '40723150' ,  '40723103' ,  '40723110' ,  '40723112' ,  '40723120' ,  '40723125' ,  '40723126' ,  '40723128' ,  '40723130' ,  '40723139' ,  '40723142' ,  '40723145' ,  '40723146' ,  '40423155' ,  '40723101' ,  '40723102' ,  '40723106' ,  '40723111' ,  '40723119' ,  '40723121' ,  '40723124' ,  '40723134' ,  '40723135' ,  '40723136' ,  '40723138' ]] \n \xa0 \n group = groupList[ 0 ] \n #將group數列隨機排列 \n random.shuffle(group) \n #列印數列 \n print (group) \n #列印數列(1~12) \n print (group[ 0 : 12 ]) \n #列印數列(13~24) \n print (group[ 12 : 24 ]) \n #列印數列(25~36) \n print (group[ 24 : 36 ]) \n #列印數列(37~49) \n print (group[ 36 : 49 ]) \n \n \n \n \n \n \n \n 使用python編寫亂數分組程式 \n [Python]-隨機random函數 \n \n \n \n \n \n \n \n 1 \n \n \n \n import   random \n \n \n \n \n \n \n \n 匯入\xa0 隨機random函數 \n \n \n \n \n \n \n \n \n 5 \n \n \n \n groupList = [[ '40723104' ,  '40723107' ,  '40723114' ,  '40723115' ,  '40723118' ,  '40723122' ,  '40723123' ,  '40723140' ,  '40723149' ,  '40723151' ,  '40723153' ,  '40723154' ,  '40723155' ,  '40623143' ,  '40723108' ,  '40723127' ,  '40723132' ,  '40723133' ,  '40723137' ,  '40723141' ,  '40723143' ,  '40723144' ,  '40723147' ,  '40723148' ,  '40723150' ,  '40723103' ,  '40723110' ,  '40723112' ,  '40723120' ,  '40723125' ,  '40723126' ,  '40723128' ,  '40723130' ,  '40723139' ,  '40723142' ,  '40723145' ,  '40723146' ,  '40423155' ,  '40723101' ,  '40723102' ,  '40723106' ,  '40723111' ,  '40723119' ,  '40723121' ,  '40723124' ,  '40723134' ,  '40723135' ,  '40723136' ,  '40723138' ]] \n \n \n \n \n \n \n \n \n 定義 groupList=所有修課學生 共49位 \n \n \n \n \n \n \n \n \n 1 \n \n \n \n group = groupList[ 0 ] \n \n \n \n \n \n \n \n \n 設定變數group=groupList[0]\xa0 \n \n \n \n \n \n \n \n \n 1 \n \n \n \n random.shuffle(group) \n \n \n \n \n \n \n \n \n 使用 random.shuffle 主要運用在將函數中的順序 打亂 \n \n \n 將函數( group)的順序打亂 \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n \n \n \n #列印數列 \n print (group) \n #列印數列(1~12) \n print (group[ 0 : 12 ]) \n #列印數列(13~24) \n print (group[ 12 : 24 ]) \n #列印數列(25~36) \n print (group[ 24 : 36 ]) \n #列印數列(37~49) \n print (group[ 36 : 49 ]) \n \n \n \n \n \n \n \n \n \n print 列印運用 \n 參考資料: https://nkust.gitbook.io/python/untitled \n \n 測試1 \n \n \n 標示 1 2 3 4 組 \n \n 持續進步 \n 1.可更進一步的對話視窗 \n \xa0\xa0\xa0 依照客戶需求給定特定變數完成亂數抽取 \n \xa0\xa0\xa0 例如 : 給定組別、人數、或是其他條件 \n 2.網頁的程序運用 \n \xa0\xa0\xa0\xa0\xa0\xa0 能夠再遠端直接作抽取動作不必下載 \n \xa0\xa0\xa0\xa0\xa0\xa0 可更加方便簡潔快速的抽取方式 \n 3.在網頁上抓取資料 \n \xa0\xa0\xa0\xa0\xa0 \xa0能夠在網頁上擷取或是引用資料 \n \xa0\xa0\xa0\xa0\xa0\xa0 直接傳達到亂數程序上提供更方便的服務 \n 4.資料庫存取 \n \xa0\xa0\xa0\xa0\xa0\xa0 完成亂數程序後是否可以 \n \xa0\xa0\xa0\xa0\xa0\xa0 直接作存取或是匯出動作 \n \n", 'tags': '', 'url': '亂數分組.html'}, {'title': 'Ag2', 'text': '', 'tags': '', 'url': 'Ag2.html'}, {'title': '紀錄', 'text': '亂數分組紀錄 \n W2： 相關資料尋找、查詢、閱讀 簡易python撰寫 練習 運用\xa0 編寫亂數分組程序 討論其關聯性及應用 \n W3： 製作相關內容整理 編輯程序 流程最簡化 PDF製作 編排整理網誌 Revral 撰寫 \n W5： \n 持續更新 \n 列舉往後目標及方向 \n 可攜系統紀錄 \n W2： 安裝 python, SciTE, Portablegit, msys2,\xa0 Tiny C Compiler,\xa0Jupyterlab, Fossil SCM, Leo Editor 和 Flutter 放入可攜系統(有先放先前的putty和ssh到測試是否可以順利使用ssh改版)。 \n W3： 配置webots到可攜系統上，測試msys2裡建立gcc編譯環境。 \n W4： 將 xelatex 配置到可攜系統上，完成測試msys2裡建立gcc編譯環境。 \n W5： 將 CoppeliaSim 放到可攜系統上。將 leo 升級到6.2.1。 \n 四輪小車紀錄 \n W2 \n CoppeliaSim User Manual \xa0內容分析 \n 了解製作四輪機器人所需功能 \n W3 \n 了解製作四輪機器人所需功能( CoppeliaSim User Manual ) \n 著手進行機器人製作 \n PDF製作 \n W4 & W5 \n PDF製作( CoppeliaSim User Manual ) \n Webots \xa0 內容分析 \n W6 \n Webots\xa0 內容分析 \n Assignment 1 總整理 \n', 'tags': '', 'url': '紀錄.html'}, {'title': '可攜系統', 'text': 'Create Portable Programming System for\xa0Windows 10 Created by 40723150 \n pdf連結 \n 在可攜系統目錄下先創一個 data 目錄 \n PortableGit： https://git-scm.com/download/win \xa0下載 64-bit Git for Windows Portable 安裝在 data 目錄下 \n MSYS2： https://www.msys2.org/ \xa0下載\xa0msys2-x86_64-20190524.exe 並安裝在 data/msys64 的目錄下 \n python3.8.2： https://www.python.org/downloads/windows/ \xa0 下載 Download Windows x86-64 executable installer 準備安裝 3.8.2 python 解譯器，安裝完成後將完整資料放在 data/py382目錄底下 python pip： 到 https://bootstrap.pypa.io/get-pip.py 頁面，滑鼠右鍵另存新檔到CD2020/data執行 \n \n \n \n \n \n \n 1 \n \n \n \n python get-pip.py \n \n \n \n \n \n \n \n \n \n \n SciTE： https://www.scintilla.org/SciTEDownload.html \xa0下載 full 64-bit download，解壓縮檔案至 data/wscite432，就是可以直接執行的 Scite.exe 編輯器，若希望以 UtF-8 編碼開啟文件，就必須啟用 Options 下拉式功能表中的 Global Options File（同\xa0SciTEGlobal.properties 檔案）其中的預設值 code.page=0 （為Windows 內定的 Big-5 編碼）修改設定為 code.page=65001，表示使用使 UTF-8 編碼，若要開啟即時更新內容，將load.on.activate=1 前面的井字號拿掉，就會即時更新了（SciTE 須重啟） 修改成 UTF-8 編碼 修改成即時更新 \n Tiny C Compiler： https://github.com/TinyCC/tinycc \xa0git clone 整個倉儲到 data 目錄下並命名目錄為 tcc \n Jupyterlab： https://github.com/jupyterlab/jupyterlab \xa0pip install jupyterlab==2.0.1 自動執行安裝 \n Fossil SCM： https://www.fossil-scm.org/ \xa0下載 fossil scm 解壓縮後將 fossil.exe 放到 data 目錄下 \n Flutter： https://github.com/flutter/flutter\xa0 \xa0(在 data 目錄底下 git clone https://github.com/flutter/flutter.git -b stable) \n Visual Studio Code： https://github.com/microsoft/vscode \xa0(目前是先安裝，安裝完成後把資料放 data/vscode 目錄下) \n home/home_mdecourse：存放 ssh 的資料和.gitconfig \n tmp：放 clone 下來的倉儲 \n ShareX： https://getsharex.com/downloads/ \n putty： 老師整理的 putty \xa0或 \xa0 個人整理的 putty.7z \n start.bat \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n \n \n \n @echo off \n set Disk=y \n subst %Disk%: "data" \n \xa0 \xa0 \n %Disk%: \n \xa0 \xa0 \n set HomePath=%Disk%:\\home \n set HomeDrive=%Disk%:\\home \n set Home=%Disk%:\\home \n set USERPROFILE=%Disk%:\\home \n \xa0 \xa0 \n REM 將系統 Python 程式的 io 設為 utf-8 \n set PYTHONIOENCODING="utf-8" \n \xa0 \xa0 \n #REM for putty \n #Set GIT_HOME=%CDisk%:\\portablegit\\bin\\ \n #Set GIT_SSH=%Disk%:\\putty\\plink.exe \n \xa0 \xa0 \n set PYTHONPATH=%Disk%:\\py382\\DLLs;%Disk%:\\py382\\Lib;%Disk%:\\py382\\Lib\\site-packages; \n set PYTHONHOME=%Disk%:\\py382 \n \xa0 \xa0 \n set path_python=%Disk%:\\py382;%Disk%:\\py382\\Scripts; \n set path_msys2=%Disk%:\\msys64\\mingw64\\bin; \n set path_git=%Disk%:\\portablegit\\bin; \n set path_tcc=%Disk%:\\tcc; \n \xa0 \xa0 \n path=%Disk%:;%path_python%;%path_msys2%;%path_git%;%path_tcc%; \n \xa0 \xa0 \n start /MIN cmd.exe \n start /MIN cmd.exe \n start /MIN cmd.exe \n start /MIN cmd.exe \n \xa0 \xa0 \n start /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe \n start /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe \n \xa0 \xa0 \n Exit \n \n \n \n \n \n \n \n \n \n \n stop.bat \n \n \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n \n \n \n @echo off \n set Disk=y \n path=%PATH%; \n \xa0 \xa0 \n taskkill /IM python.exe /F \n taskkill /IM pythonw.exe /F \n taskkill /IM scite.exe /F \n \xa0 \xa0 \n REM 終止虛擬硬碟與目錄的對應 \n subst %Disk%: /D \n REM 關閉 cmd 指令視窗 \n taskkill /IM cmd.exe /F \n \xa0 \xa0 \n EXIT \n \n \n \n \n \n \n \n \n \n 詳細流程在 W2 頁面 \n 基礎可攜系統 下載 有配置Webots 有配置Webots+ CoppeliaSim (含 xelatex) P.S. 可以下載可攜系統的leo都已經升級到6.2.1版本了 \n', 'tags': '', 'url': '可攜系統.html'}, {'title': '四輪小車', 'text': '', 'tags': '', 'url': '四輪小車.html'}, {'title': 'Scenes and models', 'text': '場景.模型.環境 \n Scenes \n 場景和模型是CoppeliaSim的主要模擬元素。模型是場景的子元素。一個場景可以包含任何數量的模型 \n Models \n 模型是場景的子元素。除了文件（“ * .ttm”-文件類型）外，模型本身不能存在，也不能通過自身進行模擬。模型必須包含在場景中才能運行 。下圖為scenes & Models 之間的關係: \n \n', 'tags': '', 'url': 'Scenes and models.html'}, {'title': 'Calculation modules', 'text': 'Collision detection \n CoppeliaSim可以非常靈活的方式檢測兩個可碰撞實體之間的碰撞。 該計算是精確的干擾計算。 碰撞檢測模塊將僅檢測碰撞； 但是它不會直接對它們做出反應（有關碰撞響應，請參見 dynamics module ）。 \n Distance calculation \n CoppeliaSim可以非常靈活的方式測量兩個可測量實體之間的最小距離。 該計算是精確的最小距離計算。 距離計算模塊將僅測量距離； 但是它不會直接對他們做出反應。 \n Inverse kinematics \n CoppeliaSim的逆運動學（IK）計算模塊非常強大且靈活。 它允許以逆運動學模式（IK模式）或正向運動學模式（FK模式）處理幾乎任何類型的機構。IK問題可以看作是找到與給定本體元素（通常是末端執行器）的某些特定位置和/或方向相對應的關節值之一。 一般而言，它是從任務空間坐標到關節空間坐標的轉換。例如，對於串接式機械手臂，問題將是在給定末端執行器的位置（和/或方向）的情況下找到操縱器中所有關節的值。 相反的在給定關節值的情況下找到末端執行器的位置-被稱為FK問題，通常被認為比IK更容易完成。在處理開放式運動學系列時，這確實是正確的，但對於一般類型的機械配置卻不成立，例如以下所示： \n 參考： graphs \xa0＆\xa0 graph data stream types \n 運動學功能也可用於獨立應用程序（即，不直接屬於CoppeliaSim框架的應用程序，例如另一台計算機，機器人或控制器上的應用程序）。 通過 Coppelia運動學例程 可以做到這一點。 \n Dynamics \n CoppeliaSim的動力學模塊當前支持下列四種不同的物理引擎。用戶在任何時候都可以根據自己的仿真需求自由地從一種發動機快速切換到另一種發動機。物理引擎支持如此多樣化的原因是，物理模擬是一項複雜的任務，可以通過不同程度的精度，速度或支持多種功能來實現： \n \n \n \n \n Bullet physics library : \n 一個開源物理引擎，具有3D碰撞檢測，剛體動力學和 soft body dynamics （CoppeliaSim當前不支持該功能）。它用於遊戲和電影的視覺效果。它通常被視為遊戲物理引擎。 \n \n \n Open Dynamics Engine (ODE) : \n一個具有兩個主要組成部分的開源物理引擎：剛體動力學和碰撞檢測。它已在許多應用程序和遊戲中使用。它通常被視為遊戲物理引擎。 \n \n VortexÂ® Studio : \xa0 \n非開源商業物理學引擎，可產生高保真物理模擬。 Vortex提供了大量物理屬性的實際參數（即對應於物理單位），使該引擎既逼真又精確。 Vortex主要用於高性能/高精度工業和研究應用。 CoppeliaSim的Vortex插件基於Vortex Studio，該插件要求每個用戶向CM Labs註冊以獲取免費許可證密鑰。 \n \n Newton Dynamics : \xa0 \nNewton Dynamics是一個跨平台的逼真的物理模擬文庫。它實現了確定性求解器，它不是基於傳統的LCP或 疊代 方法，而是分別具有兩者的穩定性和速度。這項功能使Newton Dynamics不僅成為遊戲的工具，而且還成為任何實時物理模擬的工具。當前的插件執行是BETA版本。 \n \n \n \n', 'tags': '', 'url': 'Calculation modules.html'}, {'title': '編寫代碼', 'text': 'CoppeliaSim是高度可定制的模擬器：可以自定義模擬的每個方面。此外，模擬器本身可以進行定制，以使其性能完全符合要求。這可以通過精心設計的應用程序編程接口（API）來實現。支持六種不同的編程或編碼方法，每種方法都具有相對於其他方法的特殊優點&缺點，但所有六種方法都是相互兼容的（即可以同時使用，甚至可以穿插使用）。模型，場景或模擬器本身的控制實體可以位於以下位置： \n \n an\xa0 embedded script \xa0:此方法非常容易且靈活，可以保證與其他所有默認的CoppeliaSim安裝兼容。 此方法允許自定義特定的仿真，仿真場景，並在一定程度上定制仿真器本身。 這是最簡單，最常用的方法。 \n an\xa0 add-on \xa0 or \xa0 the sandbox script \xa0: 該方法允許快速自定義模擬器本身。附件可以自動啟動並在後台運行，也可以被稱為函數。 附加組件不應該特定於特定的仿真或模型，而應提供更通用的，仿真器綁定的功能。 \n a\xa0 plugin \xa0: 該方法主要包括為CoppeliaSim編寫插件。 通常，插件僅用於通過自定義的Lua命令提供仿真，因此與第一種方法結合使用。 有時，插件用於為CoppeliaSim提供特殊功能，這些功能需要快速的計算能力（腳本在大多數情況下比編譯語言要慢），與硬件設備的特定接口（例如，真實的機器人）或與外界特殊的通信接口。 \n a\xa0 remote API \xa0: 此方法允許外部應用程序使用遠程API命令以非常簡單的方式連接到CoppeliaSim。 \n a\xa0 ROS node \xa0:這種方法允許外部應用程序通過ROS（機器人操作系統）連接到CoppeliaSim。 \n a\xa0 BlueZero node \xa0: 此方法允許外部應用程序通過BlueZero連接到CoppeliaSim。 \n \n 下表詳細描述了每種方法的各自優點和缺點： \n \n', 'tags': '', 'url': '編寫代碼.html'}, {'title': '每周回報', 'text': '每周進度及內容 \n', 'tags': '', 'url': '每周回報.html'}, {'title': 'Week 1', 'text': '升級python版本3.8 ! \n', 'tags': '', 'url': 'Week 1.html'}, {'title': 'Week 2', 'text': '小組工作分配紀錄 \n \n 先創可攜系統的目錄\xa0 ”CD2020”\xa0 ，在\xa0 CD2020\xa0 的目錄下新增\xa0 ”data” 。 \n Python 3.8.2 到\xa0 https://www.python.org/downloads/release/python-382/ \xa0 搜尋 ”Windows x86-64 executable installer” 並下載 ”Windows x86-64 executable installer” ，下載完後，執行 python-3.8.2-amd64.exe \n 選Customize installation 取消選取pip選項，Next Install 等它安裝完成 Close 到剛剛安裝對應的目錄下去複製檔案 再先前創立的data目錄底下新增”py382”的目錄，再把複製到的檔案放到py382目錄裡 \n SciTE： 到 https://www.scintilla.org/SciTEDownload.html ，下載\xa0 ” \xa0 full 64-bit download ” ，載完後解壓縮檔案，並把檔案\xa0 ”wscite432”\xa0 搬移至\xa0 data\xa0 目錄底下(或是直接解壓縮到data目錄底下)，再到 CD2020\\data\\wscite432\\wscite 目錄下執行 ”SciTE.exe” 。 \n 開啟 SciTE 後，到\xa0 Options → Open Global Option File \xa0 進行切換到 1 UTF-8 編碼及開啟 2 即時更新： 1 \xa0 將code.page=0更改成code.page=65001(切換到UTF-8編碼) 2 \xa0 將#load.on.activate=1的井字號拿掉(開啟即時更新)，儲存，關閉SciTE。 \n 在 data 目錄下新增 ”home” 目錄，開啟SciTE \n start.bat(儲存在CD2020目錄底下) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n \n \n \n @echo off \n set Disk=y \n subst %Disk%: "data" \n \xa0 \n %Disk%: \n \xa0 \n set HomePath=%Disk%:\\home \n set HomeDrive=%Disk%:\\home \n set Home=%Disk%:\\home \n set USERPROFILE=%Disk%:\\home \n \xa0 \n REM 將系統 Python 程式的 io 設為 utf-8 \n set PYTHONIOENCODING="utf-8" \n \xa0 \n #REM for putty \n #Set GIT_HOME=%CDisk%:\\portablegit\\bin\\ \n #Set GIT_SSH=%Disk%:\\putty\\plink.exe \n \xa0 \n set PYTHONPATH=%Disk%:\\py382\\DLLs;%Disk%:\\py382\\Lib;%Disk%:\\py382\\Lib\\site-packages; \n set PYTHONHOME=%Disk%:\\py382 \n \xa0 \n set path_python=%Disk%:\\py382;%Disk%:\\py382\\Scripts; \n set path_msys2=%Disk%:\\msys64\\mingw64\\bin; \n set path_git=%Disk%:\\portablegit\\bin; \n set path_tcc=%Disk%:\\tcc; \n \xa0 \n path=%Disk%:;%path_python%;%path_msys2%;%path_git%;%path_tcc%; \n \xa0 \n start /MIN cmd.exe \n start /MIN cmd.exe \n start /MIN cmd.exe \n start /MIN cmd.exe \n \xa0 \n start /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe \n start /MIN %Disk%:\\wscite432\\wscite\\SciTE.exe \n \xa0 \n Exit \n \n \n \n \n \n \n \n stop.bat(儲存在CD2020目錄底下) \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n \n \n \n @echo off \n set Disk=y \n path=%PATH%; \n \xa0 \n taskkill /IM python.exe /F \n taskkill /IM pythonw.exe /F \n taskkill /IM scite.exe /F \n \xa0 \n REM 終止虛擬硬碟與目錄的對應 \n subst %Disk%: /D \n REM 關閉 cmd 指令視窗 \n taskkill /IM cmd.exe /F \n \xa0 \n EXIT \n \n \n \n \n \n \n \n MSYS2： https://www.msys2.org/ \xa0 下載 \xa0 msys2-x86_64-20190524.exe \xa0 並執行 Next Browse→選擇CD2020\\data\\msys64的目錄(自己新建msys64的目錄也可以，若沒有新建目錄安裝時會自動建立目錄) →Next Next 在安裝的同時去下載portablegit \n PortableGit： https://git-scm.com/download/win 下載64-bit Git for Windows Portable安裝在data目錄下 OK \n msys2 安裝完成 反選 Run MSYS2 64bit now選項，finish 等PortableGit安裝完成重啟可攜，測試。 \n 安裝pip： 到 https://bootstrap.pypa.io/get-pip.py 頁面，滑鼠右鍵另存新檔到CD2020/data執行 \n \n \n \n \n \n \n 1 \n \n \n \n python get-pip.py \n \n \n \n \n \n \n \n 測試pip是否正常運作 \n \n \n \n \n \n \n 1 \n \n \n \n pip install flask bs4 lxml pelican markdown flask_cors leo \n \n \n \n \n \n \n \n 使用pip安裝flask,bs4,xml,elican, mrkdown,flask_cors,leo模組 安裝過程若出現紅字，請重新執行一次模組安裝指令，應該會正常安裝。 \n Tiny C Compiler： https://github.com/TinyCC/tinycc \xa0 \n \n \n \n \n \n \n 1 \n \n \n \n git clone https://github.com/TinyCC/tinycc.git tcc \n \n \n \n \n \n \n \n git clone 整個倉儲到 data 目錄下並命名目錄為 tcc \n Jupyterlab： https://github.com/jupyterlab/jupyterlab \xa0 \n \n \n \n \n \n \n 1 \n \n \n \n pip install jupyterlab==2.0.1 \n \n \n \n \n \n \n \n 自動執行安裝 \n Fossil SCM： https://www.fossil-scm.org/ \xa0下載 fossil scm 解壓縮後將 fossil.exe 放到 data 目錄下 \n Putty： 下載 putty 放到data裡面，把之前的ssh和.gitconfig放到home裡面測試是否可以成功用ssh推送資料。 \n', 'tags': '', 'url': 'Week 2.html'}, {'title': 'Week 3', 'text': '進度回報 \n \n', 'tags': '', 'url': 'Week 3.html'}, {'title': 'Week 4~5', 'text': '首次直播討論 \n \n', 'tags': '', 'url': 'Week 4~5.html'}, {'title': 'Week 6', 'text': 'Assignment 2 直播討論 \n \n OBS串流直播問題: \n Q:建立OBS與youtube聯繫無法串流 \n nvidia處理器與OBS對應路徑抓取問題 \n (同時也適用使用OBS串流直播時顯示器讀取畫面為黑頻) \n A:在nvidia中→管理3D設定→程式設定→若無OBSprotabie請先新增進入選項 \n 然後再將慣用處理器更改為"整合圖形" \n 回到OBSprotable再次選取顯示器擷取變可抓取到顯示器畫面 \n \n Q:OBS在建立串流時無法輸出 \n A:將OBSprotable中→設定→輸出→編碼器更換成(軟體編碼x264) \n \n \n x264(軟體 )\xa0 功能 \n x264提供了命令行介面以及應用程式介面（API）。前者在許多圖形用戶介面軟體中得到應用，如Staxrip和MeGUI。後者也在許多其他類型到軟體中調用，如HandBrake和FFmpeg。 \n x264具備的H.264標準定義的特性，較之其他H.264編碼器而言多出許多。H.264編碼器之間的特性比較，可以參見： \n 更多資訊：H.264 § Software encoder feature comparison x264包含有一些心理視覺增強技術，以增強編碼影片的主觀品質。 \n x264能夠在普通計算機上實現多路高畫質影片的實時編碼。 \n x264也是第一個免費的藍光影片編碼器。2010年4月，x264項目組宣布藍光格式影片編碼功能完成，使得x264成為首個免費的藍光影片編碼器。 \n 資料來源:\xa0 https://zh.wikipedia.org/wiki/X264 \xa0(Wiki) \n', 'tags': '', 'url': 'Week 6.html'}, {'title': 'Week 7', 'text': 'Assignment 3 上課實作 \n \n', 'tags': '', 'url': 'Week 7.html'}, {'title': 'Week 9', 'text': '個人直播影片 \n \n', 'tags': '', 'url': 'Week 9.html'}, {'title': 'Week 10', 'text': '將 亂數分組程式 放到網頁上當作 服務 \n 利用AJAX的特性，讀取選項的資料(在選擇2a或2b的資料後不會刷新頁面) 讀到的資料利用 <input type="submit">提交所選擇的表單 送出表單 後再利用script執行亂數分組的程式(在網頁上只能執行javascript的程式) \n 啟用 Google + Domain API \n 設定 OAuth 2.0 客戶端ID \n', 'tags': '', 'url': 'Week 10.html'}, {'title': 'Week 11', 'text': '直播討論過程 :\xa0 https://drive.google.com/open?id=1MYonzUtGwj_QK3I2N-w3YeZzUYwUC-xA&usp=gmai l \n 小車模型 \n 摻考 40723147 \n https://cad.onshape.com/ documents/ e3eb0b663356e543ec6baaaf/w/ a4c0716868b2978a27b12ee4/e/ 92badca8de429b497d1e9f01 \n \n \n', 'tags': '', 'url': 'Week 11.html'}, {'title': 'Week 13', 'text': '抽籤分組 cdaw 13-2 \n http://mde.tw/cdaw13-2/content/index.html \n 再推網頁時有發生一些bug，git push時，遠端網頁會跑掉! \n 在協同的過程中因版次不同而出現此問題 \n \n 重新 git pull \n 然後到靜端修改錯誤!! \n 即可 \n', 'tags': '', 'url': 'Week 13.html'}, {'title': 'Week 15', 'text': 'Cdaw15-1 \n 使用近端時，記得刪除亂碼!! \n 虛擬主機 \n Q：wsgi.py 啟動的時候出現錯誤 \n \n A：ID位置是fd開頭才是正確的 \n \n Q：在設定IPv6網路位置時跳出錯誤 \n \n A： 查一下另外一個網路卡的 IPv6 是否也設固定 IP \n', 'tags': '', 'url': 'Week 15.html'}, {'title': 'Week 16', 'text': "Cdaw16-3 \n 模擬 \n A simulation in CoppeliaSim can be started, paused and stopped with [Menu bar --> Simulation --> Start/Pause/Stop simulation] or through the related toolbar buttons: \n 可以使用 [菜單欄->模擬->開始/暫停/停止模擬 ]或通過相關的工具欄按鈕來啟動，暫停和停止CoppeliaSim中的模擬： \n \n Internally(在內部),\xa0the\xa0simulator(模擬器)\xa0will use\xa0additional(額外)\xa0intermediate(中間)\xa0states in order to\xa0correctly(正確地)\xa0inform\xa0 scripts (告知腳本) \xa0or programs about what will happen next. Following\xa0state diagram(狀態圖)\xa0illustrates(說明)\xa0the simulator's\xa0internal(內部)\xa0states: \n Scripts and programs should \xa0alwaysreact(總是反應) \xa0 according to the current system call function and possibly the simulation state in order to \xa0 behave correctly(正確運行) . It is good practice to \xa0 divide each(劃分每個) \xa0 control code into \xa0 at\xa0least(至少) \xa0 4 system call functions (e.g. for \xa0non-threaded(非線性)\xa0 child scripts): \n 腳本和程序應始終根據當前系統調用功能以及可能的模擬狀態進行反應 ，以便正確運行。 優良作法是 將每個控制代碼 至少分為4個系統調用函數 （例如，用於非線程子腳本）： \n \n In itialization(初始化) \xa0 function: \xa0 sysCall_init: the function is called only when the script is \xa0 initialized(初始化) . \n \n \xa0 \xa0 \xa0 初始化函數： sysCall_init：僅在腳本初始化時才調用該函數。 \n \n Actuation(激活) \xa0 function: \xa0 sysCall_actuation: the function is called when actuation should happen. \n \n \xa0 \xa0 \xa0 激活函數 ：sysCall_actuation：應在發生激活時調用該函數。 \n \n Sensing(感測) \xa0 function: \xa0 sysCall_sensing: this function is called when sensing should happen. \n \n \xa0 \xa0 \xa0 感測功能： sysCall_sensing：應在感測發生時調用此函數。 \n \n Clean-up(清理) \xa0 function: \xa0 sysCall_cleanup: the function is called just before the script is \xa0 de-initialized(未初始化) \xa0 (e.g. at simulation end, or when the script is \xa0 destroyed(銷毀) ). \n \n \xa0 \xa0 \xa0 清理函數： sysCall_cleanup：該函數在腳本未初始化之前被調用（例如在模擬結 束時或腳本被銷毀時）。 \n", 'tags': '', 'url': 'Week 16.html'}, {'title': 'Week 17', 'text': '記得更新自身倉儲 與分組倉儲進度，準備下周錄影的資料。 \n 前幾周都已小組抽人上傳自己的進度，過程中因為git push時有人還在更改內容所以一直出現bug，之後找出修復方法 git pull後進入近端修正出現錯誤的亂碼就恢復正常了!', 'tags': '', 'url': 'Week 17.html'}, {'title': '電子書翻譯', 'text': 'MechanicalDesignProcess \n 機械設計過程 \n Created by 40723133, 40723108,\xa040723143, 40723127,40723144 \n 序章 \n Before we get started, let’s briefly define what we mean when we talk about an “electronic product.” It is a product that has a circuit board in it and usually has some input/output device such as an LCD. Examples of electronic products include cell phones, digital cameras, and ultrasonic toothbrushes. 在開始之前，我們先簡單地定義當我們談論一個“電子產品”時，它代表的是其中裝有電路板的產品，通常具有一些輸入/輸出設備，例如LCD。電子產品的例子包括手機、數位相機、超聲波牙刷。 An electronic product enclosure is an item that surrounds and supports the circuit board. The enclosure is what makes the device usable to the consumer. The enclosure is necessary for a number of reasons – to protect the electronics (the circuit board and LCD) from the environment or from a physical jolt (such as dropping the product). \n 電子產品外殼是包圍並支撐電路的物件。外殼能讓消費者使用這個產品。外殼 的樣子來自各種原因，但是最必要的是保護電子設備（電路板和LCD），防止電子設備板從環境或物理顛簸（例如掉落產品）損毀。 \n The enclosure provides access to input information to the device, via keys or buttons perhaps, and allows information to be transferred from the device. The enclosure provides structure so that the circuit board logic is supported and protected. \n Examples of some very effective product enclosures that have been developed inrecent years are the Apple iPhone 7 or the HP Spectre laptop computer (both, circa 2016). \n 機盒可通過按鍵或按鈕訪問設備的輸入信息也許，並允許從設備傳輸信息。外殼提供結構，以便支持和保護電路板邏輯。近年來出現的是Apple iPhone 7或HP Spectre筆記本電腦（兩者都是在2016年的產品）都是已開發出一些非常有效的產品外殼的案例。 \n In essence, a successful design of an enclosure will be the one in which the design has conformed to the product’s written specification (spec) and has been done within the cost and time parameters that were set. \n 從本質上講，一種成功的外殼設計將是設計已符合產品的書面規格（spec），並且能在設定的成本和時間參數內完成。 \n Chapter 4 Materials and Processes \n Now that we have the structural foundation for the design, we’ll actually start this chapter with a “return to basics.” We’ve already touched upon the need to define and then conform to the product specification, but now we’ll return to cost consider-ations of the design. The choice of material and process for the individual parts that make up the assembly will get the designer also thinking about the assembly and servicing of the product. 現在我們已經有了設計的結構基礎，我們將開始實際本章的“回歸基礎”。我們已經談到了定義和然後遵循產品規格，但現在我們將回到成本考慮因素，設計方案。選擇組成裝配體的各個零件的材料和過程將獲得設計師還考慮了產品的組裝和維修。 \n 4.1 Cost Versus Time Versus Specification \xa0 成本與時間對規格 \n This chapter will start with a return to the basic consideration of the design, and that is an emphasis on the cost being the deciding factor (ultimately) in the decision to make one choice over another in the design process. 本章將從返回設計的基本考慮開始，強調成本是最終做出決定的決定性因素在設計過程中一個選擇勝過另一個選擇。 \n All of this really still goes back to cost because it could have been determined (by the project management) that the overall cost is minimized by a “two-stage” product release (above). 開發過程的後期所有這一切實際上仍要歸還成本，因為它可以確定項目管理）通過“兩階段”產品將總成本降至最低釋放（以上）。 \n The overall sales, from the beginning of product release to the end of product life, will be increased by this methodology. The concept of the tooling needed for the project, and at what stage it is required, was explored in the section on Engineering Economy in Chap. 1. 從產品發佈到結束的整體銷售這種方法將延長產品壽命。工具的概念本節探討了項目所需的內容以及所需的階段。第一章工程經 1 。 \n The cost can also be broken down into several time frames, such as ： \n 成本也可以細分為多個時間範圍，例如： \n 1. 開發成本（直到首次交付給客戶） \n 2. 產品的持續生產成本：材料 / 組裝 / 間接費用 \n 3. 生產後的服務和保修成本 \n 4. 報廢費用，例如回收利用 \n 1.What are the acceptance criteria for the design? (How do I know if I succeeded? Really?) 設計的驗收標準是什麼？（我怎麼知道我成功了？是嗎？） \n It is usually in a canonical form, which can be formal or informal. The design should strive to standardize acceptance standards, so this is completely transparent to the project team. \n 通常是規範的形式，可以是正式的或 非正式的。設計應致力於規範接受標準，因此 這對於項目團隊是完全透明的。 \n \n What is the design budget in US dollars? 以美元計算的設計預算是多少？ \n \n \n What is the project schedule for each part related to the entire product? 與整個產品相關的各個部分的項目進度表是什麼？ \n \n All of the above is very important for choosing the following ： 以上所有內容對於選擇以下內容非常重要： \n \n Material of each part. 各個零件的材料。 \n The process required to produce the above parts. 生產上述零件所需的過程。 \n Assembly procedures required to assemble the above parts. 組裝上述零件所需的組裝程序。 \n Test procedures required to test the above parts and components. 測試上述零件和組件所需的測試程序。 \n Develop quality control procedures to ensure that parts and components are produced and assembled to specifications. 制定質量控製程序以確保零件和組件的生產 並按照規格組裝。 \n Meet service (expected or unexpected) requirements. This will appear repeatedly in Chaps. 滿足服務（預期或意外）要求。 這將在 Chaps 中反復出現。 \n \n \xa0 \n 4.2 The Designer’s Mind Space \xa0 設計師的思維空間 \n The designer has to “think ahead.” When faced with designing an electronic enclo-sure, here are some things that go on in the mind of a designer, hopefully, all at the same time. 設計師必須“先思考”。面對設計電子外殼時當然，這是設計師心目中發生的一些事情，希望這些都是同一時間。 \n I consider these the following questions to be “ever-present” in the designer’s head, which is why I use the term “designer’s mind space”to describe these ever-present questions ： 我認為以下這些問題是“呈現在設計師的腦海中，這就是為什麼我使用術語“設計師的思維空間”描述這些永遠存在的問題： \n \n How big? 多大？ \n How many parts are needed to accomplish purpose? 完成目標需要多少部分？ \n Has this (or a slight variation) been done before? Here, or at another company? 之前（是否做過一些改動）? 在這裡或在另一家公司? \n How has the product purpose been accomplished by the competition? 是否曾經做過（或稍作改動）?在這裡，還是在另一家公司?競爭如何實現產品目的? \n What is the “user interface,” that is, how will the customer use this product (but-tons/displays/lights/doors/connections for power, input, and output)? 什麼是“用戶界面”，即客戶將如何使用該產品（噸 / 顯示器 / 燈 / 門 / 電源，輸入和輸出的連接）? \n I am designing this portion of the product, what are the other portions that I am\xa0 not (directly) responsible for? 我正在設計產品的這一部分，我還需要其他哪些部分? \n \n \xa0 4.3 Materials and Process Choice \xa0 材料和工藝選擇 \n Once a designer has designed a part, the designer must determine the “best” Cost (Chpt4) way for that part to be produced. The general items to be determined for each part are ： \n 設計人員設計完零件後，必須確定“最佳”成本生產該零件的方式。要確定的一般項目每個部分是： \n \n The material of the part. 零件的材料。 \n Finish required for the part (see next section). 零件需要的表面處理（請參閱下一節）。 \n Dimensional accuracy needed for the part. 零件所需的尺寸精度。 \n The process by which that part will be produced (perhaps one process for early needs, prototyping, and preproduction of parts and a different process for mature production of the parts). 生產零件的過程（也許是早期需求的一個過程，原型設計，零件的預生產以及成熟的原型的不同過程零件的還原）。 \n Quantity needed for the part (say, per quarter, per month, per year). 零件所需的數量（例如，每季度，每月，每年）。 \n Second operations needed for the part (beyond finishing). 零件需要的第二次操作（超出精加工）。 \n Cost requirements for the part. 零件的成本要求。 \n \n The designer should choose a material that will satisfy (meet or exceed) ： 設計者應選擇滿足要求的材料 \n 1.Strength requirements 強度要求 2.Weight requirements 重量要求 3.Reliability requirements 可靠性要求 4.Regulatory requirements 法規要求 5.Safety requirements 安全要求 6.Thermal requirements 散熱要求 7.Shielding requirements (EMI/RFI) 屏蔽要求（ EMI / RFI ） 8.Compatibility requirements for metals (galvanic corrosion) 金屬的兼容性要求（電腐蝕） 9.Elastic requirements (durometer) 彈性要求（硬度計） 10.Conductive (or insulating) requirements 導電（或絕緣）要求 11.Opaqueness requirements 不透明要求 1 2.Wear requirements 磨損要求 13. Aesthetical requirements (touch, visual) 審美要求（觸覺，視覺） 14.Acoustical requirements 聲學要求 15.Ultraviolet (UV) transmission and resistance requirements 紫外線（ UV ）傳輸和電阻要求 \n Once the material choice is made, it must be fully specified, that is, specified so that it will be unambiguous on the part specification. 做出材料選擇後，必須指定這在零件規格上將是明確的。 \n Materials and finishes are usually specified to some standard such as ASTM, MIL-standard (US government), or international standards such as ISO/IEC. 使用的材料和表面處理合某些標準，例如 ASTM ， MIL 標準（美國政府）或國際標準，例如 ISO / IEC 。 \n There must also be in place some method-ology of assuring (through standard quality control procedures) that the material specified is the material being fabricated into the final part. 還必須有一些方法 - 保證（通過標準質量控製程序）的材料規格最終是將材料製成最終零件。 \n \xa0 4.4 Finishes and Coatings \xa0 面漆和塗料 \n All of the choices made when selecting a material (previous selection) are directly “ coupled” with the choice of finish for that material. Practically all engineered parts need a finish. There would be some exceptions to this, for example, a “sculpture”(artwork) or building façade that is intended to corrode (and have a “corroded”look). The designer will be specifying both a material and a finish to every part they design. \n 選擇材料時所做的選擇都直接與該材料的表面處理選擇“耦合”。幾乎所有工程零件都需要完成。 對此會有一些例外，例如“雕塑”。設計師將為每個零件指定材料和飾面設計。 \n Finishes (including coatings in the broad sense) are required to ： 面漆（包括廣義的塗料）必須 \n \n Strength requirements 強度要求 \n \xa0Weight requirements 重量要求 \n \xa0Reliability requirements 可靠性要求 \n \xa0Regulatory requirements 法規要求 \n \xa0Safety requirements\xa0安全要求 \n Thermal requirements\xa0散熱要求 \n \xa0Shielding requirements (EMI/RFI) 屏蔽要求（EMI / RFI） \n \xa0Compatibility requirements for metals (galvanic corrosion) 金屬的兼容性要求（電腐蝕） \n \xa0Elastic requirements (durometer)\xa0 彈性要求（硬度計） \n Conductive (or insulating) requirements 導電（或絕緣）要求 \n \xa0Opaqueness requirements 不透明要求 \n \xa0Wear requirements\xa0磨損要求 \n Aesthetical requirements (touch, visual)\xa0審美要求（觸覺，視覺） \n Acoustical requirements\xa0聲學要求 \n Ultraviolet (UV) transmission and resistance requirements 紫外線（UV）傳輸和電阻要求 \n \n \n Retard corrosion in storage (from fabricator, to assembler, to customer) or in final usage by the customer. 延緩腐蝕（從製造商，組裝商到客戶）或在倉庫中腐蝕客戶的最終使用權。 \n Appearance (aesthetics). \xa0 外觀（美學）。 \n In the case of bonded connections, the protective coating will actually be omitted (masked). For such areas, moisture entrance must be prevented by forced ventilation or adequate sealing. 對於鍵合連接，實際上將省略保護塗層。對於此類區域，必須通過強制通風或適當密封來防止水分進入。 \n \n darted and calling out an existing specification( 標準化並提出現有規範 \xad) ： \n Saves time in that standards already exist that are “universally” accepted. 節省時間，因為已經存在“普遍”接受的標準。 \n Suppliers already have these processes in place to economically produce these finishes. 供應商已經具備了這些流程，可以經濟地生產這些飾面。 \n The finish can be checked (verified by the specifier) using acceptable, in-place quality control procedures. 可以使用可接受的就地質量控製程序來檢查（由指定者驗證）表面光潔度。 \n \xa0 4.5 Punching and Forming Metals \xa0 沖孔和成形金屬 \n The basic processes by which metals are punched, notched, formed, and bent has changed in recent years. Contemporary fabrication is done on CNC (computer-ized numerical controlled) multi-axis machines or high-speed strippet punch presses. 近年來，金屬沖壓，開槽，成形和彎曲的基本過程發生了變化。當代製造是在 CNC 上完成的（計算機數控）多軸機床或高速帶式沖床。 \n Multi-axis spindle machines are commonplace in today’s fabrication environment. The term “5-axis” is typically referring to the ability of a CNC machine to move a part of a tool on five different axes at the same time. 在當今的製造環境中，多軸主軸機床是公司常見的。術語“ \xa0 5 軸”通常是指 CNC 機床的能力在五個不同的軸上同時移動零件或工具。 \n 5-axis machining centers can rotate on two additional rotary axes (A and B) which help the cutting tool approach the part from all directions. 5 軸加工中心可以在另外兩個旋轉軸（ A 和 B ）上旋轉，幫助切削工具從各個方向接近零件。 \n As with all fabrication techniques, the more the designer is familiar with the machine and machining process, the better the design will be Cost (Chpt4). 所有製造技術一樣，設計師對機器和加工過程中，設計的成本將更好（ Chpt4 ）。 \n I’ve included a section on Sheet Metal Practices in Appendix. These show very common practices of bending and punching metal that sheet metal fabricators use and are commonly found in corporate drafting standard manuals. 我在附錄中包含了有關鈑金實踐的部分。這些顯示非常鈑金製造商使用的彎曲和沖壓金屬的常用做法通常可以在公司起草標準手冊中找到。 \n \xa0 \n 4.6 Molding Plastics \xa0 成型塑料 \n A designer of electronic enclosures must have a solid knowledge of the plastic molding process and how to design plastic parts. 電子外殼的設計師必須對塑料模具具有紮實的知識，過程以及如何設計塑料零件。 \n With an understanding of injection molding tooling, the following six concepts will help in the design of injection molded parts: 在了解注射成型工具的情況下，以下六個概念將有助於注射成型零件的設計 \n The idea of the draft needed to eject the part from the mold. 拔模的想法需要將零件從模具中彈出。 \n The location of the main gate (or “sprue”) that will “inject” plastic into the mold. 將塑料“注入”到模具中的主澆口（或“澆口”）的位置。 \n The idea of “mold flow” needs to be well understood. “模具流動”的概念需要很好地理解。 \n If “undercuts” are required by the part, the tooling will show how this is to be achieved (and how much this can complicate the mold). 如果零件需要“底切”，則模具將顯示如何進行加工。達到的效果（以及使模具複雜化的度）。 \n The mold “parting line” as shown in the tooling is a reflection of the part design and thus shows the difficulties with those designs. 模具中所示的模具“分型線”反映了零件設計從而顯示出這些設計的困難。 \n One of the biggest advantages of molded plastic parts is the second part it does not need. The operation becomes a finished part (compared to "similar" metal parts). usually, Molded plastic parts do not require cosmetic painting on the outside. Most Plastic parts eventually have a molded texture on the outside his is usually achieved by etching the mold with a "texture pattern". \n 模製塑料零件的最大優點之一是它不需要的第二個零件操作成為成品零件（與“類似”金屬零件相比）。 通常，模製塑料部件不需要在外部進行美容噴漆。 大多數塑料零件最終在外部具有模壓紋理 \n 通常通過用“紋理圖案”蝕刻模具來實現。 \n', 'tags': '', 'url': '電子書翻譯.html'}, {'title': 'VirtualBox', 'text': 'Setting VirtualBox Network \n 在VirtualBox→Files→Preferences →Network 新增一個網路設定，支援DHCP和IPV6 \n 再到cd2020pj1的虛擬主機設定NAT的Port號 \n IPv4設定：Guest IP是透過ifconfig查出來(IPv6的也是) \n IPv6設定 \n Ubuntu 20.04的網路設定 \n P.S.\xa0 Guest IP 的部分可以在虛擬主機開機的狀態下進行修改設定 \n IP 查詢 \n \n \n \n \n \n \n 1 \n \n \n \n ifconfig \n \n \n \n \n \n \n \n 若跳出尚未安裝net-tools的話請安裝 \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install net-tools \n \n \n \n \n \n \n \n 若在 IPv6 環境下有跳出網路錯誤 \n \n IPv6環境設定是否正確 請到 /etc/netplan 目錄下檢查 00-install-config.yaml 檔案內的設定 \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n cd /etc/netplan \n sudo vi 00-install-config.yaml \n \n \n \n \n \n \n \n 00-install-config.yaml \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n \n \n \n # This is the network config written by \'subiquity\' \n network: \n \xa0\xa0\xa0\xa0 ethernets: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 enpes3: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 dhcp4: true \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 dhcp6: true \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 nameservers: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 addresses: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 - 2001:b000:168::1 \n \xa0\xa0\xa0\xa0 version: 2 \n \n \n \n \n \n \n \n 編輯完成後:wq跳出編輯並儲存，並更新netplan設定 \n \n \n \n \n \n \n 1 \n \n \n \n sudo netplan apply \n \n \n \n \n \n \n \n \n \n \n \n proxy問題 請到 /etc/apt/apt.conf.d 目錄下檢查是否有proxy.conf檔案，若沒有，請用新增(直接用vi編輯器開啟proxy.conf就會自動新增) \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n cd /etc/apt/apt.conf.d \n sudo vi proxy.conf \n \n \n \n \n \n \n \n proxy.conf的檔案內容 \n \n \n \n \n \n \n 1 \n \n \n \n Acquire::http::proxy "http://[2001:288:6004:17::填port號]"; \n \n \n \n \n \n \n \n 先增完內容後要更新apt \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt update \n \n \n \n \n \n \n \n \n \n 網路設定完成後可以啟動wsgi.py \n 再用電腦上的網頁(不是虛擬主機的網頁)到\xa0 https://localhost:8443/看是否成功連上，如果成功連上後就換putty \n Putty設定 \n IPv4 \n Host Name：localhost Port：22 Connection type：SSH \n IPv6 \n Host Name：::1 Port：22 Connection type：SSH \n X11(IPv4或IPv6設定都一樣) \n ▣Enable X11 forwarding \n X display location：localhost:0.0 \n Xming \n 安裝 Xming \n 直接安裝後搬移至可攜 \n 或是直接安裝在隨身碟成可攜 \n 安裝完成後執行XLaunch.exe，全部為預設設定。 \n 在putty執行xtrem看是否會成功跳出 \n File Manager \n 執行nautilus若無法執行，請安裝nautilus \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install nautilus \n \n \n \n \n \n \n \n 安裝完成後再執行一次 nautilus，正常的話就會跳出FileManager \n CoppeliaSim \n 到coppeilasim的目錄下開啟coppeilaSim.sh的檔案 \n \n \n \n \n \n \n 1 \n \n \n \n ./coppeilaSim.sh \n \n \n \n \n \n \n \n 之後就會開啟CoppeilaSim了 \n \n', 'tags': '', 'url': 'VirtualBox.html'}]};